import numpy as np
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime,timedelta
ticker=pd.read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies")[0]['Symbol']
ticker
end_date = datetime.now()
start_date = end_date - timedelta(days = 15*365)
stock_data = yf.download(ticker[100],start_date , end_date , interval = '1d', prepost = False)
stock_data
stock_data = stock_data.loc[:,['Open','Close','Volume']]
stock_data['prev_close'] = stock_data.loc[:,'Close'].shift(1)
stock_data['prev_volume'] = stock_data.loc[:,'Volume'].shift(1)
stock_data['200sma'] = stock_data['prev_close'].rolling(200).mean()
stock_data['10sma'] = stock_data['prev_close'].rolling(10).mean()
stock_data['20sma'] = stock_data['prev_close'].rolling(20).mean()
stock_data['50sma'] = stock_data['prev_close'].rolling(50).mean()
stock_data['100sma'] = stock_data['prev_close'].rolling(100).mean()
stock_data['500sma'] = stock_data['prev_close'].rolling(500).mean()

x = stock_data.index.values
plt.figure(figsize=(15,5))
plt.plot(x, stock_data['prev_close'] , color= 'blue')
plt.plot(x , stock_data['200sma'], color='red')
plt.plot(x , stock_data['10sma'], color='green')
plt.plot(x , stock_data['20sma'], color='purple')
plt.plot(x , stock_data['50sma'], color='yellow')
plt.plot(x , stock_data['100sma'], color='cyan')
plt.show()
plt.figure(figsize=(15,6))
plt.plot(x,stock_data['200sma'], color='red')
plt.plot(x,stock_data['50sma'], color='green')
plt.plot(x,stock_data['prev_close'], color='blue')
plt.show()
def calc_rsi(data,period):
    delta = data.diff()
    up = delta.clip(lower=0)
    down = -1*delta.clip(upper=0)
    up_ema = up.ewm(com = period ,adjust =False).mean()
    down_ema= down.ewm(com = period , adjust = False).mean()
    rs = up_ema / down_ema
    rsi = 100 -(100/(1+rs))
    return rsi

stock_data['RSI'] = calc_rsi(stock_data['prev_close'],13)
stock_data['RSI_VOL'] = calc_rsi(stock_data['prev_volume'],13)
plt.figure(figsize=(10,3))
plt.plot(x,stock_data['RSI'],color='purple')
plt.plot([x[0],x[-1]],[80,80],color='red')
plt.plot([x[0],x[-1]],(20,20),color='green')
plt.xlim(x[1000],x[1500])
plt.ylim(0,100)
plt.show()
def calc_bollinger(data,period):
    mean = data.rolling(period).mean()
    sd = data.rolling(period).std()
    upper_bound = np.array(mean) + 2* np.array(sd)
    lower_bound = np.array(mean) - 2* np.array(sd)
    return upper_bound , lower_bound

ub,lb = calc_bollinger(stock_data['prev_close'],20)
stock_data['upper_band'] = ub
stock_data['lower_band'] = lb

plt.figure(figsize=(12,3))
plt.plot(x,stock_data['prev_close'], color= 'blue')
plt.plot(x,stock_data['upper_band'],color ='yellow')
plt.plot(x,stock_data['lower_band'],color ='yellow')
plt.show()
def calc_macd(data,len1,len2,len3):
    short_ema = data.ewm(span = len1 ,adjust =False).mean()
    long_ema = data.ewm(span = len2 , adjust = False).mean()
    MACD = short_ema - long_ema
    MACD_SIG = MACD.ewm(span = len3 , adjust =False).mean()
    return MACD,MACD_SIG

Macd,signal = calc_macd(stock_data['prev_close'],12,26,9)


stock_data['MACD'] = Macd
stock_data['MACD_SIG'] = signal
stock_data= stock_data.replace(np.inf,np.nan).dropna()
stock_data
from sklearn.linear_model import LinearRegression
y = stock_data['Close']
x = stock_data.drop(['Close','Volume'],axis=1).values

num_test=365

X_train = x[:-1*num_test]
Y_train = y[:-1*num_test]

X_test = x[-1*num_test:]
Y_test = y[-1*num_test:]

model =LinearRegression()
model = model.fit(X_train ,Y_train)
output = model.predict(X_test)
plt.figure(figsize=(15,5))
plt.plot(range(len(Y_test)),Y_test,color = 'blue')
plt.plot(range(len(output)),output,color = 'red')
plt.show()